package com.adi.plugin;

import android.content.Context;
import android.util.Base64;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyStoreException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.UnrecoverableEntryException;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 * Wrapper for Android Keystore Functionality
 */
public final class KeyStorage
{

    private static final String AES_MODE = "AES/GCM/NoPadding";
    private static final String UTF_8 = "UTF-8";
	private static final int AES_Key_Size = 128;

	private final Context keyContext;

    /**
     * Constructor - checks if the given alias already exists and creates it if not.
     * Initialises public and private keys generated by keystore
     *
     * @param context   Context used by the wrapper
     * @param alias     Keystore Alias to use
     */
    public KeyStorage(final Context context, final String alias, final boolean encryptionRequired) throws KeyStoreException, CertificateException,
            NoSuchAlgorithmException, IOException, NoSuchProviderException,
            InvalidAlgorithmParameterException, UnrecoverableEntryException
    {
    	keyContext = context;

        try {
            String myKey = "myappsecretkey";
            byte[] key = myKey.getBytes("UTF-8");
            MessageDigest sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);

            System.out.println(new String(key,"UTF-8"));
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");

            byte[] aesKey = secretKey.getEncoded();
            String enryptedKeyB64 = Base64.encodeToString(aesKey, Base64.DEFAULT);
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private Key getSecretKey(Context context) throws Exception
    {
        try {
            String myKey = "myappsecretkey";
            byte[] key = myKey.getBytes("UTF-8");
            MessageDigest sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);

            System.out.println(new String(key,"UTF-8"));
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");

            return secretKey;
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return null;
    }

    /**
     * Encrypt the given string value using the public key from the Keystore
     *
     * @param value     The string to encrypt
     * @return          The encrypted string
     */
    public String encryptString(final String value)
    {
        try
        {
            final Cipher inCipher = Cipher.getInstance(AES_MODE);
            inCipher.init(Cipher.ENCRYPT_MODE, getSecretKey(keyContext));

            byte[] cipherText = inCipher.doFinal(value.getBytes("UTF-8"));

            return Base64.encodeToString(cipherText, Base64.NO_WRAP);
        }
        catch(NoSuchPaddingException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(NoSuchAlgorithmException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(InvalidKeyException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(IOException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(BadPaddingException e)
        {
        	throw new IllegalArgumentException(e);
        }
        catch(IllegalBlockSizeException e)
        {
        	throw new IllegalArgumentException(e);
        }
        catch(Exception e)
        {
        	throw new IllegalArgumentException(e);
        }
    }

    /**
     * Decrypt the given string using the private key from the Keystore
     *
     * @param cipherText    The Encrypted string
     * @return              The Decrypted string
     */
    public String decryptString(final String cipherText)
    {
        try
        {
            Cipher output = Cipher.getInstance(AES_MODE);
            output.init(Cipher.DECRYPT_MODE, getSecretKey(keyContext));

            CipherInputStream cipherInputStream = new CipherInputStream(
                    new ByteArrayInputStream(Base64.decode(cipherText, Base64.NO_WRAP)), output);
            ArrayList<Byte> values = new ArrayList<Byte>();
            int nextByte;
            while ((nextByte = cipherInputStream.read()) != -1)
            {
                values.add((byte) nextByte);
            }

            byte[] bytes = new byte[values.size()];
            for (int i = 0; i < bytes.length; i++)
            {
                bytes[i] = values.get(i);
            }

            return new String(bytes, 0, bytes.length, UTF_8);
        }
        catch(NoSuchPaddingException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(NoSuchAlgorithmException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(InvalidKeyException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(IOException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(BadPaddingException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(IllegalBlockSizeException e)
        {
            throw new IllegalArgumentException(e);
        }
        catch(Exception e)
        {
            throw new IllegalArgumentException(e);
        }
    }
}
